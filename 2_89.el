(defun adjoin-term (term term-list)
  (let ((order-of-term-list (1- (length term-list))))
    (cond ((> order-of-term-list (order term)) (cons (car term-list) (adjoin-term term (cdr term-list))))
          ((= order-of-term-list (order term)) (cons (coeff term) (cdr term-list))))
          ((< order-of-term-list (order term)) (adjoin-term term (cons 0 term-list)))))
(defun the-empty-termlist () '())
(defun first-term (term-list) (make-term (1- (length term-list)) (car term-list) ))
(defun rest-terms (term-list) (cdr term-list))
(defun empty-termlist? (term-list) (null term-list))
(defun make-term (order coeff) (list order coeff))
(defun order (term) (car term))
(defun coeff (term) (cadr term))
