(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (insert item)
      (let ((new-pair (cons item '())))
        (cond ((empty?) (set! front-ptr new-pair)
                        (set! rear-ptr new-pair))
              (else (set-cdr! rear-ptr new-pair)
                    (set! rear-ptr new-pair)))))
    (define (delete) 
      (cond ((empty?) (error "DELETE! called with an empty queue"))
            (else (set! front-ptr (cdr front-ptr)))))

    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))

    (define (print)
      (define (print-items items)
        (if (not (null? items))
            (let ((first (car items))
                  (next (cdr items)))
              (display first)
              (if (not (null? next))
                  (display " "))
              (print-items next))))
      (display "Q (")
      (print-items front-ptr)
      (display ")")
      (newline))
    
    (define (dispatch m)
      (cond ((eq? m 'insert) insert)
            ((eq? m 'delete) delete)
            ((eq? m 'front) front)
            ((eq? m 'print) print)
            ((eq? m 'empty?) empty?)
            (else error "UNKNOWN queue operation" m)))
    dispatch))
